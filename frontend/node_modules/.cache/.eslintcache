[{"/home/oyvind/Documents/amkS2T/amks2t/src/index.tsx":"1","/home/oyvind/Documents/amkS2T/amks2t/src/ColorModeSwitcher.tsx":"2","/home/oyvind/Documents/amkS2T/amks2t/src/App.tsx":"3","/home/oyvind/Documents/amkS2T/amks2t/src/Header.tsx":"4","/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx":"5","/home/oyvind/Documents/amkS2T/amks2t/src/api.ts":"6","/home/oyvind/Documents/amkS2T/amks2t/src/theme.ts":"7"},{"size":381,"mtime":1681479356612,"results":"8","hashOfConfig":"9"},{"size":743,"mtime":1681479209010,"results":"10","hashOfConfig":"9"},{"size":323,"mtime":1681479893626,"results":"11","hashOfConfig":"9"},{"size":640,"mtime":1681478672216,"results":"12","hashOfConfig":"9"},{"size":5171,"mtime":1681477746228,"results":"13","hashOfConfig":"9"},{"size":726,"mtime":1680183544825,"results":"14","hashOfConfig":"9"},{"size":659,"mtime":1681480044984,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14dqwdv",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/oyvind/Documents/amkS2T/amks2t/src/index.tsx",[],[],"/home/oyvind/Documents/amkS2T/amks2t/src/ColorModeSwitcher.tsx",[],[],"/home/oyvind/Documents/amkS2T/amks2t/src/App.tsx",[],[],"/home/oyvind/Documents/amkS2T/amks2t/src/Header.tsx",["39","40"],[],"/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx",["41"],[],"import { Box, Button, Center, HStack, Input, SimpleGrid, Text, Textarea, VStack, useColorModeValue, useToast } from \"@chakra-ui/react\";\nimport { SetStateAction, useEffect, useRef, useState } from \"react\";\nimport { FileUploader } from \"react-drag-drop-files\";\nimport API from \"./api\";\n\n\n\nconst AudioUpload = (): JSX.Element => {\n\n    const [audio, setAudio] = useState<File>();\n    const [audioFile, setAudioFile] = useState<File>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [srtTranscript, setSrt] = useState<string>();\n    const [docTranscript, setDocTranscript] = useState<string>();\n    const toast = useToast();\n\n    const fontColor = useColorModeValue(\"mode.text.light\", \"mode.text.dark\");\n\n\n\n    // Upload audio from local file system\n    const audioRef = useRef<HTMLAudioElement>(null);\n\n    // useEffect when audio is uploaded. Use uploadAudio function to set audio file\n    useEffect(() => {\n        if (audio) {\n            uploadAudio(audio);\n        }\n    }, [audio]);\n\n\n\n\n    const uploadAudio = async (audio: File) => {\n        if (audio) {\n            setAudioFile(audio);\n            const objectUrl = URL.createObjectURL(audio);\n            console.log(objectUrl);\n            if (audioRef.current) {\n                audioRef.current.src = objectUrl;\n            }\n        }\n    };\n\n    //handle change function while file is uploaded. setFile to uploaded file\n\n    const handleChange = (file: File) => {\n        setAudio(file);\n    };\n\n    const transcribeAudio = async (file: Blob) => {\n        setLoading(true);\n        setDocTranscript(\"\");\n        if (!file) {\n            setLoading(false);\n            return;\n        }\n        try {\n            const response = await API.transcribeAudio(file, audioFile!.name);\n            setLoading(false);\n            setDocTranscript(response.doc_text);\n            setSrt(response.srt_text);\n        } catch (error) {\n            toast({\n                title: \"En feil har oppstått.\",\n                description: \"Det skjedde en feil under transkripsjonen. Prøv igjen senere.\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              });\n        }\n\n    };\n\n    // download transcript as a doc file\n    const downloadTranscript = async () => {\n        const element = document.createElement(\"a\");\n        // file as .docx\n        const file = new Blob([docTranscript!], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.doc`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    const handleTranscriptChange = (event: { target: { value: SetStateAction<string | undefined>; }; }) => {\n        setDocTranscript(event.target.value);\n    }\n\n    // download transcript as a srt file\n\n    const downloadTranscriptSrt = async () => {\n        const element = document.createElement(\"a\");\n\n\n        const file = new Blob([srtTranscript!], { type: 'application/octet-stream' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.srt`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n\n\n\n    return (\n        <Center>\n            <SimpleGrid columns={1} alignContent=\"center\" gap={5}>\n                <VStack spacing={5}>\n                    <FileUploader\n                        multiple={false}\n                        handleChange={handleChange}\n                        types={['WAV']}\n                    />\n                    <Text>{audio ? `${audio.name}` : \"\"}</Text>\n                    <audio ref={audioRef} controls />\n                </VStack>\n                <Button\n                    isLoading={loading}\n                    loadingText='Transcribing'\n                    spinnerPlacement=\"end\"\n                    variant='outline'\n                    onClick={() => transcribeAudio(audio!)}>Transcribe\n                </Button>\n                {docTranscript && (\n                    <>\n                        <Box padding=\"10px\" borderRadius=\"2xl\">\n                            <Textarea\n                                size=\"lg\"\n                                minWidth=\"600px\"\n                                minHeight=\"300px\"\n                                value={docTranscript}\n                                onChange={handleTranscriptChange}\n                            />\n                        </Box>\n                        <Center> {/* Wrap the buttons in a Center component */}\n                            <HStack>\n                                <Button bgColor={fontColor} onClick={downloadTranscript}>Download transcript as .doc</Button>\n                                <Button onClick={downloadTranscriptSrt}>Download original transcript as .srt</Button>\n                            </HStack>\n                        </Center>\n                    </>\n                )}\n            </SimpleGrid>\n        </Center>\n\n    );\n\n};\n\nexport default AudioUpload;",[],"/home/oyvind/Documents/amkS2T/amks2t/src/api.ts",[],[],"/home/oyvind/Documents/amkS2T/amks2t/src/theme.ts",[],[],{"ruleId":"42","severity":1,"message":"43","line":1,"column":29,"nodeType":"44","messageId":"45","endLine":1,"endColumn":35},{"ruleId":"42","severity":1,"message":"46","line":1,"column":37,"nodeType":"44","messageId":"45","endLine":1,"endColumn":43},{"ruleId":"42","severity":1,"message":"47","line":1,"column":39,"nodeType":"44","messageId":"45","endLine":1,"endColumn":44},"@typescript-eslint/no-unused-vars","'HStack' is defined but never used.","Identifier","unusedVar","'Spacer' is defined but never used.","'Input' is defined but never used."]