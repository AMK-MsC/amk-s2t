{"ast":null,"code":"var _jsxFileName = \"/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx\",\n  _s = $RefreshSig$();\nimport { Box, Button, Center, SimpleGrid, Text, Textarea } from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport HuggingFaceAPI from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioUpload = () => {\n  _s();\n  const [countDown, setCountDown] = useState(0);\n  const [audio, setAudio] = useState();\n  const [audioFile, setAudioFile] = useState();\n  const [loading, setLoading] = useState(false);\n  const [transcript, setTranscript] = useState();\n  useEffect(() => {\n    const initializeModel = async () => {\n      try {\n        const response = await HuggingFaceAPI.initializeModel();\n        setCountDown(parseInt(response.estimated_time));\n        console.log(countDown);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    void initializeModel();\n  }, []);\n\n  // check if model is initialized when countDown is divisible by 20\n  useEffect(() => {\n    const checkModel = async () => {\n      setTranscript(\"Medicinsk nødtelefon. Hei, hei, Moni Hansen som ringer. Kona mi ligger på bakken, jegvet ikke hva jeg skal gjøre. Hun svarer meg ikke når jeg snakker til henne. Hun bare falt sammen.\");\n      try {\n        const response = await HuggingFaceAPI.checkModel();\n        if (response) {\n          setCountDown(0);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    void checkModel();\n  }, [countDown % 20 == 0 && countDown > 0]);\n\n  // Timer that counts down from countDown to 0 and updates the state every second\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (countDown > 0) {\n        setCountDown(countDown - 1);\n      }\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [countDown]);\n\n  // Upload audio from local file system\n  const audioRef = useRef(null);\n  const uploadAudio = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file) {\n      setAudio(file);\n      setAudioFile(file);\n      const objectUrl = URL.createObjectURL(file);\n      console.log(objectUrl);\n      if (audioRef.current) {\n        audioRef.current.src = objectUrl;\n        //audioRef.current.play();\n      }\n    }\n  };\n\n  const transcribeAudio = async file => {\n    setTranscript(\"\");\n    setLoading(true);\n    if (!file) {\n      return;\n    }\n    try {\n      const response = await HuggingFaceAPI.transcribeAudio(file);\n      console.log(response);\n      setLoading(false);\n      if (response.text === \"\") {\n        setTranscript(\"No speech detected\");\n        return;\n      }\n      setTranscript(response.text.trim());\n    } catch (error) {\n      const response = await HuggingFaceAPI.initializeModel();\n      setCountDown(parseInt(response.estimated_time));\n    }\n  };\n\n  // download transcript as a doc file\n  const downloadTranscript = async () => {\n    const element = document.createElement(\"a\");\n    // file as .docx\n    const file = new Blob([transcript], {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${audioFile.name.slice(0, -4)}.doc`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  const handleTranscriptChange = event => {\n    setTranscript(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Center, {\n    children: countDown === 0 ? /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 1,\n      alignContent: \"center\",\n      gap: 5,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: uploadAudio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: audioRef,\n          controls: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: loading ? /*#__PURE__*/_jsxDEV(Text, {\n          children: \"Transcribing audio. Please wait.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 36\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => transcribeAudio(audio),\n          children: \"Transcribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 84\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), transcript && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          padding: \"10px\",\n          borderRadius: \"2xl\",\n          children: /*#__PURE__*/_jsxDEV(Textarea, {\n            size: \"lg\",\n            minWidth: \"600px\",\n            minHeight: \"300px\",\n            value: transcript,\n            onChange: handleTranscriptChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: downloadTranscript,\n          children: \"Download Transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Initializing model. Estimated time remaining: \", countDown, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioUpload, \"Ehwfs4vxGXMP8FeKdjNre1rg2sc=\");\n_c = AudioUpload;\nexport default AudioUpload;\nvar _c;\n$RefreshReg$(_c, \"AudioUpload\");","map":{"version":3,"names":["Box","Button","Center","SimpleGrid","Text","Textarea","useEffect","useRef","useState","HuggingFaceAPI","AudioUpload","countDown","setCountDown","audio","setAudio","audioFile","setAudioFile","loading","setLoading","transcript","setTranscript","initializeModel","response","parseInt","estimated_time","console","log","error","checkModel","timer","setTimeout","clearTimeout","audioRef","uploadAudio","event","file","target","files","objectUrl","URL","createObjectURL","current","src","transcribeAudio","text","trim","downloadTranscript","element","document","createElement","Blob","type","href","download","name","slice","body","appendChild","click","handleTranscriptChange","value"],"sources":["/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx"],"sourcesContent":["import { Box, Button, Center, Input, SimpleGrid, Text, Textarea, VStack } from \"@chakra-ui/react\";\nimport { SetStateAction, useEffect, useRef, useState } from \"react\";\nimport HuggingFaceAPI from \"./api\";\n\n\n\nconst AudioUpload = (): JSX.Element => {\n\n    const [countDown, setCountDown] = useState<number>(0);\n    const [audio, setAudio] = useState<Blob>();\n    const [audioFile, setAudioFile] = useState<File>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [transcript, setTranscript] = useState<string>();\n\n    useEffect(() => {\n        const initializeModel = async () => {\n            try {\n                const response = await HuggingFaceAPI.initializeModel();\n                setCountDown(parseInt(response.estimated_time))\n                console.log(countDown)\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        void initializeModel();\n    }, [])\n\n    // check if model is initialized when countDown is divisible by 20\n    useEffect(() => {\n        const checkModel = async () => {\n            setTranscript(\"Medicinsk nødtelefon. Hei, hei, Moni Hansen som ringer. Kona mi ligger på bakken, jegvet ikke hva jeg skal gjøre. Hun svarer meg ikke når jeg snakker til henne. Hun bare falt sammen.\");\n            try {\n                const response = await HuggingFaceAPI.checkModel();\n                if (response) {\n                    setCountDown(0);\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        void checkModel();\n    }, [countDown % 20 == 0 && countDown > 0])\n\n    // Timer that counts down from countDown to 0 and updates the state every second\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (countDown > 0) {\n                setCountDown(countDown - 1);\n            }\n        }, 1000);\n        return () => clearTimeout(timer);\n    }, [countDown]);\n\n\n    // Upload audio from local file system\n    const audioRef = useRef<HTMLAudioElement>(null);\n\n\n    const uploadAudio = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            setAudio(file);\n            setAudioFile(file);\n            const objectUrl = URL.createObjectURL(file);\n            console.log(objectUrl);\n            if (audioRef.current) {\n                audioRef.current.src = objectUrl;\n                //audioRef.current.play();\n            }\n        }\n    };\n\n    const transcribeAudio = async (file: Blob) => {\n        setTranscript(\"\");\n        setLoading(true);\n        if (!file) {\n            return;\n        }\n        try {\n            const response = await HuggingFaceAPI.transcribeAudio(file);\n            console.log(response);\n            setLoading(false);\n            if (response.text === \"\") {\n                setTranscript(\"No speech detected\");\n                return;\n            }\n            setTranscript(response.text.trim())\n        } catch (error) {\n            const response = await HuggingFaceAPI.initializeModel();\n            setCountDown(parseInt(response.estimated_time))\n        }\n        \n    };\n\n    // download transcript as a doc file\n    const downloadTranscript = async () => {\n        const element = document.createElement(\"a\");\n        // file as .docx\n        const file = new Blob([transcript!], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.doc`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    const handleTranscriptChange = (event: { target: { value: SetStateAction<string | undefined>; }; }) => {\n        setTranscript(event.target.value);\n    }\n\n\n\n\n    return (\n        <Center>\n            {countDown === 0 ? (\n                <SimpleGrid columns={1} alignContent=\"center\" gap={5}>\n                    <Box>\n                        <input type=\"file\" onChange={uploadAudio} />\n                        <audio ref={audioRef} controls />\n                    </Box>\n                    <Box>\n                        {loading ? <Text>Transcribing audio. Please wait.</Text> : <Button onClick={() => transcribeAudio(audio!)}>Transcribe</Button>}\n                    </Box>\n                    {transcript && (\n                        <>\n                            <Box padding=\"10px\" borderRadius=\"2xl\">\n                                <Textarea\n                                    size=\"lg\"\n                                    minWidth=\"600px\"\n                                    minHeight=\"300px\"\n                                    value={transcript}\n                                    onChange={handleTranscriptChange}\n                                />\n                            </Box>\n                            <Button onClick={downloadTranscript}>Download Transcript</Button>\n                        </>\n                    )}\n                </SimpleGrid>\n            ) : (\n                <Box>\n                    <Text>Initializing model. Estimated time remaining: {countDown}s</Text>\n                </Box>\n            )}\n        </Center>\n    );\n\n};\n\nexport default AudioUpload;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}