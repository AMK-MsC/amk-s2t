{"ast":null,"code":"var _jsxFileName = \"/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx\",\n  _s = $RefreshSig$();\nimport { Box, Button, Center, SimpleGrid, Text } from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport HuggingFaceAPI from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUpload = () => {\n  _s();\n  const [countDown, setCountDown] = useState(0);\n  const [audio, setAudio] = useState();\n  const [loading, setLoading] = useState(false);\n  const [transcript, setTranscript] = useState();\n  useEffect(() => {\n    const initializeModel = async () => {\n      try {\n        const response = await HuggingFaceAPI.initializeModel();\n        //setCountDown(parseInt(response.estimated_time))\n        setCountDown(0);\n        console.log(countDown);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    void initializeModel();\n  }, []);\n\n  // check if model is initialized when countDown is divisible by 20\n  useEffect(() => {\n    const checkModel = async () => {\n      try {\n        const response = await HuggingFaceAPI.checkModel();\n        if (response) {\n          setCountDown(0);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    void checkModel();\n  }, [countDown % 20 == 0 && countDown > 0]);\n\n  // Timer that counts down from countDown to 0 and updates the state every second\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (countDown > 0) {\n        setCountDown(countDown - 1);\n      }\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [countDown]);\n\n  // Upload audio from local file system\n  const audioRef = useRef(null);\n  const uploadAudio = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file) {\n      setAudio(file);\n      const objectUrl = URL.createObjectURL(file);\n      console.log(objectUrl);\n      if (audioRef.current) {\n        audioRef.current.src = objectUrl;\n        //audioRef.current.play();\n      }\n    }\n  };\n\n  const transcribeAudio = async file => {\n    setTranscript(\"\");\n    setLoading(true);\n    if (!file) {\n      return;\n    }\n    const response = await HuggingFaceAPI.transcribeAudio(file);\n    console.log(response);\n    setLoading(false);\n    if (response.text === \"\") {\n      setTranscript(\"No speech detected\");\n      return;\n    }\n    setTranscript(response.text);\n  };\n  const transcribeAudioLocal = async file => {\n    setTranscript(\"\");\n    setLoading(true);\n    if (!file) {\n      return;\n    }\n    const response = await HuggingFaceAPI.transcribeAudioTest(file);\n    console.log(response);\n    setLoading(false);\n    if (response.text === \"\") {\n      setTranscript(\"No speech detected\");\n      return;\n    }\n    setTranscript(response.text);\n  };\n\n  // download transcript as a doc file\n  const downloadTranscript = async () => {\n    const element = document.createElement(\"a\");\n    // file as .docx\n    const file = new Blob([transcript], {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `transcription.docx`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  const handleTranscriptChange = event => {\n    setTranscript(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      gap: 10,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"audio/*\",\n          onChange: uploadAudio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: audioRef,\n          controls: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: loading ? /*#__PURE__*/_jsxDEV(Text, {\n          children: \"Transcribing audio. Please wait.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => transcribeAudio(audio),\n          children: \"Transcribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 80\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioUpload, \"BktPm0SMqiPs1bDWwSCAxxfbVOI=\");\n_c = AudioUpload;\nexport default AudioUpload;\nvar _c;\n$RefreshReg$(_c, \"AudioUpload\");","map":{"version":3,"names":["Box","Button","Center","SimpleGrid","Text","useEffect","useRef","useState","HuggingFaceAPI","AudioUpload","countDown","setCountDown","audio","setAudio","loading","setLoading","transcript","setTranscript","initializeModel","response","console","log","error","checkModel","timer","setTimeout","clearTimeout","audioRef","uploadAudio","event","file","target","files","objectUrl","URL","createObjectURL","current","src","transcribeAudio","text","transcribeAudioLocal","transcribeAudioTest","downloadTranscript","element","document","createElement","Blob","type","href","download","body","appendChild","click","handleTranscriptChange","value"],"sources":["/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx"],"sourcesContent":["import { Box, Button, Center, Input, SimpleGrid, Text, Textarea, VStack } from \"@chakra-ui/react\";\nimport { SetStateAction, useEffect, useRef, useState } from \"react\";\nimport HuggingFaceAPI from \"./api\";\n\n\n\nconst AudioUpload = (): JSX.Element => {\n\n    const [countDown, setCountDown] = useState<number>(0);\n    const [audio, setAudio] = useState<Blob>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [transcript, setTranscript] = useState<string>();\n\n    useEffect(() => {\n        const initializeModel = async () => {\n            try {\n                const response = await HuggingFaceAPI.initializeModel();\n                //setCountDown(parseInt(response.estimated_time))\n                setCountDown(0)\n                console.log(countDown)\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        void initializeModel();\n    }, [])\n\n    // check if model is initialized when countDown is divisible by 20\n    useEffect(() => {\n        const checkModel = async () => {\n            try {\n                const response = await HuggingFaceAPI.checkModel();\n                if (response) {\n                    setCountDown(0);\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        void checkModel();\n    }, [countDown % 20 == 0 && countDown > 0])\n\n    // Timer that counts down from countDown to 0 and updates the state every second\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (countDown > 0) {\n                setCountDown(countDown - 1);\n            }\n        }, 1000);\n        return () => clearTimeout(timer);\n    }, [countDown]);\n\n\n    // Upload audio from local file system\n    const audioRef = useRef<HTMLAudioElement>(null);\n\n\n    const uploadAudio = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            setAudio(file);\n            const objectUrl = URL.createObjectURL(file);\n            console.log(objectUrl);\n            if (audioRef.current) {\n                audioRef.current.src = objectUrl;\n                //audioRef.current.play();\n            }\n        }\n    };\n\n    const transcribeAudio = async (file: Blob) => {\n        setTranscript(\"\");\n        setLoading(true);\n        if (!file) {\n            return;\n        }\n        const response = await HuggingFaceAPI.transcribeAudio(file);\n        console.log(response);\n        setLoading(false);\n        if (response.text === \"\") {\n            setTranscript(\"No speech detected\");\n            return;\n        }\n        setTranscript(response.text)\n    };\n\n    const transcribeAudioLocal = async (file: Blob) => {\n        setTranscript(\"\");\n        setLoading(true);\n        if (!file) {\n            return;\n        }\n        const response = await HuggingFaceAPI.transcribeAudioTest(file);\n        console.log(response);\n        setLoading(false);\n        if (response.text === \"\") {\n            setTranscript(\"No speech detected\");\n            return;\n        }\n        setTranscript(response.text)\n    };\n\n\n    // download transcript as a doc file\n    const downloadTranscript = async () => {\n        const element = document.createElement(\"a\");\n        // file as .docx\n        const file = new Blob([transcript!], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\n        element.href = URL.createObjectURL(file);\n        element.download = `transcription.docx`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    const handleTranscriptChange = (event: { target: { value: SetStateAction<string | undefined>; }; }) => {\n        setTranscript(event.target.value);\n    }\n\n\n\n\n    return (\n        <Center>\n            <SimpleGrid columns={2} gap={10}>\n                <Box>\n                    <input type=\"file\" accept=\"audio/*\" onChange={uploadAudio} />\n                    <audio ref={audioRef} controls />\n                </Box>\n                <Box>\n                    {loading ? <Text>Transcribing audio. Please wait.</Text> : <Button onClick={() => transcribeAudio(audio!)}>Transcribe</Button>}\n                </Box>\n            </SimpleGrid>\n        </Center>\n    );\n\n};\n\nexport default AudioUpload;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}