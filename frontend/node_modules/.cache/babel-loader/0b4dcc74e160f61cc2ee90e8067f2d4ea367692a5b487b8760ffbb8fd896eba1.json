{"ast":null,"code":"const HuggingFaceAPI = {\n  initializeModel: async () => {\n    try {\n      const response = await fetch(\"https://api-inference.huggingface.co/models/oyvindgrutle/amk-whisper\", {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_HUGGINGFACE_TOKEN}`\n        },\n        method: \"POST\",\n        body: \"start\"\n      });\n      console.log(`Response status code: ${response.status}`);\n      if (response.status == 503) {\n        const result = await response.json();\n        console.log(`Result: ${result.estimated_time}`);\n        return result;\n      }\n    } catch (error) {\n      console.log(`Error: ${error}`);\n    }\n  },\n  checkModel: async () => {\n    try {\n      const response = await fetch(\"https://api-inference.huggingface.co/models/oyvindgrutle/amk-whisper\", {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_HUGGINGFACE_TOKEN}`\n        },\n        method: \"POST\",\n        body: \"start\"\n      });\n      console.log(\"check model\");\n      if (response.status != 503) {\n        return true;\n      }\n    } catch (error) {\n      console.log(`Error: ${error}`);\n    }\n  },\n  transcribeAudio: async audio => {\n    console.log(\"audio inference\");\n    try {\n      const response = await fetch(\"https://api-inference.huggingface.co/models/oyvindgrutle/amk-whisper\", {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_HUGGINGFACE_TOKEN}`\n        },\n        method: \"POST\",\n        body: audio\n      });\n      console.log(`Response status code: ${response.status}`);\n      if (response.status == 200) {\n        const result = await response.json();\n        console.log(`Result: ${result.transcript}`);\n        return result;\n      }\n    } catch (error) {\n      console.log(`Error: ${error}`);\n      return error;\n    }\n  },\n  transcribeAudioTest: async audio => {\n    console.log(\"audio inference\");\n    try {\n      const response = await fetch(\"http://localhost:5000/audio\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          audio: audio\n        })\n      });\n      console.log(`Response status code: ${response.status}`);\n      if (response.status == 200) {\n        const result = await response.json();\n        console.log(`Result: ${result}`);\n        return result;\n      }\n    } catch (error) {\n      console.log(`Error: ${error}`);\n      return error;\n    }\n  }\n};\nexport default HuggingFaceAPI;","map":{"version":3,"names":["HuggingFaceAPI","initializeModel","response","fetch","headers","Authorization","process","env","REACT_APP_HUGGINGFACE_TOKEN","method","body","console","log","status","result","json","estimated_time","error","checkModel","transcribeAudio","audio","transcript","transcribeAudioTest","JSON","stringify"],"sources":["/home/oyvind/Documents/amkS2T/amks2t/src/api.ts"],"sourcesContent":["const HuggingFaceAPI = {\n    initializeModel: async () => {\n\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/oyvindgrutle/amk-whisper\",\n                {\n                    headers: { Authorization: `Bearer ${process.env.REACT_APP_HUGGINGFACE_TOKEN}` },\n                    method: \"POST\",\n                    body: \"start\",\n                }\n            )\n            console.log(`Response status code: ${response.status}`)\n            if (response.status == 503) {\n                const result = await response.json();\n                console.log(`Result: ${result.estimated_time}`);\n                return result;\n            }\n        }\n        catch (error) {\n            console.log(`Error: ${error}`);\n        }\n    },\n\n    checkModel: async () => {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/oyvindgrutle/amk-whisper\",\n                {\n                    headers: { Authorization: `Bearer ${process.env.REACT_APP_HUGGINGFACE_TOKEN}` },\n                    method: \"POST\",\n                    body: \"start\",\n                }\n            )\n            console.log(\"check model\")\n            if (response.status != 503) {\n                return true;\n            }\n        }\n        catch (error) {\n            console.log(`Error: ${error}`);\n        }\n    },\n\n    transcribeAudio: async (audio: Blob) => {\n        console.log(\"audio inference\")\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/oyvindgrutle/amk-whisper\",\n                {\n                    headers: { Authorization: `Bearer ${process.env.REACT_APP_HUGGINGFACE_TOKEN}`},\n                    method: \"POST\",\n                    body: audio,\n\n                }\n            )\n            console.log(`Response status code: ${response.status}`)\n            if (response.status == 200) {\n                const result = await response.json();\n                console.log(`Result: ${result.transcript}`);\n                return result;\n            }\n        } catch (error) {\n            console.log(`Error: ${error}`);\n            return error;\n        }\n    },\n\n    transcribeAudioTest: async (audio: Blob) => {\n        console.log(\"audio inference\")\n        try {\n            const response = await fetch(\"http://localhost:5000/audio\",\n                {\n                    method: \"POST\",\n                    body: JSON.stringify({\n                        audio: audio\n                    }),\n\n                }\n            )\n            console.log(`Response status code: ${response.status}`)\n            if (response.status == 200) {\n                const result = await response.json();\n                console.log(`Result: ${result}`);\n                return result;\n            }\n        } catch (error) {\n            console.log(`Error: ${error}`);\n            return error;\n        }\n    }\n}\n\nexport default HuggingFaceAPI;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}