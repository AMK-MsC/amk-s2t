{"ast":null,"code":"var _jsxFileName = \"/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx\",\n  _s = $RefreshSig$();\nimport { Box, Button, Center, GridItem, HStack, SimpleGrid, Textarea } from \"@chakra-ui/react\";\nimport { useRef, useState } from \"react\";\nimport API from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioUpload = () => {\n  _s();\n  const [audio, setAudio] = useState();\n  const [audioFile, setAudioFile] = useState();\n  const [loading, setLoading] = useState(false);\n  const [srtTranscript, setSrt] = useState();\n  const [docTranscript, setDocTranscript] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n\n  // Upload audio from local file system\n  const audioRef = useRef(null);\n  const uploadAudio = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file) {\n      setAudio(file);\n      setAudioFile(file);\n      const objectUrl = URL.createObjectURL(file);\n      console.log(objectUrl);\n      if (audioRef.current) {\n        audioRef.current.src = objectUrl;\n        //audioRef.current.play();\n      }\n    }\n  };\n\n  const transcribeAudio = async file => {\n    setLoading(true);\n    if (!file) {\n      setLoading(false);\n      return;\n    }\n    const response = await API.transcribeAudio(file);\n    setLoading(false);\n    setDocTranscript(response.doc_text);\n    setSrt(response.srt_text);\n  };\n\n  // download transcript as a doc file\n  const downloadTranscript = async () => {\n    const element = document.createElement(\"a\");\n    // file as .docx\n    const file = new Blob([docTranscript], {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${audioFile.name.slice(0, -4)}.doc`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  const handleTranscriptChange = event => {\n    setDocTranscript(event.target.value);\n  };\n\n  // download transcript as a srt file\n\n  const downloadTranscriptSrt = async () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([srtTranscript], {\n      type: 'application/octet-stream'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${audioFile.name.slice(0, -4)}.srt`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      gap: 4,\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 1,\n        children: /*#__PURE__*/_jsxDEV(Center, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: uploadAudio\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            ref: audioRef,\n            controls: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 2,\n        children: /*#__PURE__*/_jsxDEV(Center, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            isLoading: loading,\n            loadingText: \"Transcribing\",\n            spinnerPlacement: \"end\",\n            variant: \"outline\",\n            onClick: () => transcribeAudio(audio),\n            children: \"Transcribe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 2,\n        children: /*#__PURE__*/_jsxDEV(Center, {\n          children: docTranscript && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              padding: \"10px\",\n              borderRadius: \"2xl\",\n              children: /*#__PURE__*/_jsxDEV(Textarea, {\n                size: \"lg\",\n                minWidth: \"600px\",\n                minHeight: \"300px\",\n                value: docTranscript,\n                onChange: handleTranscriptChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(HStack, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: downloadTranscript,\n                children: \"Download Transcript as .doc\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: downloadTranscriptSrt,\n                children: \"Download Transcript as .srt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioUpload, \"uBNqjeFK/nASxNAPnXQI6M0M0U0=\");\n_c = AudioUpload;\nexport default AudioUpload;\nvar _c;\n$RefreshReg$(_c, \"AudioUpload\");","map":{"version":3,"names":["Box","Button","Center","GridItem","HStack","SimpleGrid","Textarea","useRef","useState","API","AudioUpload","audio","setAudio","audioFile","setAudioFile","loading","setLoading","srtTranscript","setSrt","docTranscript","setDocTranscript","audioUrl","setAudioUrl","audioRef","uploadAudio","event","file","target","files","objectUrl","URL","createObjectURL","console","log","current","src","transcribeAudio","response","doc_text","srt_text","downloadTranscript","element","document","createElement","Blob","type","href","download","name","slice","body","appendChild","click","handleTranscriptChange","value","downloadTranscriptSrt"],"sources":["/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx"],"sourcesContent":["import { Box, Button, Center, GridItem, Heading, HStack, Input, SimpleGrid, Text, Textarea, VStack } from \"@chakra-ui/react\";\nimport { SetStateAction, useEffect, useRef, useState } from \"react\";\nimport API from \"./api\";\n\n\n\nconst AudioUpload = (): JSX.Element => {\n\n    const [audio, setAudio] = useState<File>();\n    const [audioFile, setAudioFile] = useState<File>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [srtTranscript, setSrt] = useState<string>();\n    const [docTranscript, setDocTranscript] = useState<string>();\n    const [audioUrl, setAudioUrl] = useState<string>();\n\n\n\n    // Upload audio from local file system\n    const audioRef = useRef<HTMLAudioElement>(null);\n\n\n    const uploadAudio = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            setAudio(file);\n            setAudioFile(file);\n            const objectUrl = URL.createObjectURL(file);\n            console.log(objectUrl);\n            if (audioRef.current) {\n                audioRef.current.src = objectUrl;\n                //audioRef.current.play();\n            }\n        }\n    };\n\n    const transcribeAudio = async (file: Blob) => {\n        setLoading(true);\n        if (!file) {\n            setLoading(false);\n            return;\n        }\n        const response = await API.transcribeAudio(file);\n        setLoading(false);\n        setDocTranscript(response.doc_text);\n        setSrt(response.srt_text);\n    };\n\n    // download transcript as a doc file\n    const downloadTranscript = async () => {\n        const element = document.createElement(\"a\");\n        // file as .docx\n        const file = new Blob([docTranscript!], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.doc`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    const handleTranscriptChange = (event: { target: { value: SetStateAction<string | undefined>; }; }) => {\n        setDocTranscript(event.target.value);\n    }\n\n    // download transcript as a srt file\n\n    const downloadTranscriptSrt = async () => {\n        const element = document.createElement(\"a\");\n\n\n        const file = new Blob([srtTranscript!], { type: 'application/octet-stream' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.srt`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n\n\n\n    return (\n        <Center>\n            <SimpleGrid columns={2} gap={4}>\n                <GridItem colSpan={1}>\n                    <Center>\n                        <input type=\"file\" onChange={uploadAudio} />\n                        <audio ref={audioRef} controls />\n                    </Center>\n                </GridItem>\n                <GridItem colSpan={2}>\n                    <Center>\n                        <Button\n                            isLoading={loading}\n                            loadingText='Transcribing'\n                            spinnerPlacement=\"end\"\n                            variant='outline'\n                            onClick={() => transcribeAudio(audio!)}>Transcribe\n                        </Button>\n                    </Center>\n                </GridItem>\n                <GridItem colSpan={2}>\n                    <Center>\n                        {docTranscript && (\n                            <>\n                                <Box padding=\"10px\" borderRadius=\"2xl\">\n                                    <Textarea\n                                        size=\"lg\"\n                                        minWidth=\"600px\"\n                                        minHeight=\"300px\"\n                                        value={docTranscript}\n                                        onChange={handleTranscriptChange}\n                                    />\n                                </Box>\n                                <HStack>\n                                    <Button onClick={downloadTranscript}>Download Transcript as .doc</Button>\n                                    <Button onClick={downloadTranscriptSrt}>Download Transcript as .srt</Button>\n                                </HStack>\n                            </>\n                        )}\n                    </Center>\n                </GridItem>\n            </SimpleGrid>\n\n        </Center>\n    );\n\n};\n\nexport default AudioUpload;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}