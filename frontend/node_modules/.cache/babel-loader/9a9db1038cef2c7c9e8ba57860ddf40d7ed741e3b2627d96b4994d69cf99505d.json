{"ast":null,"code":"var _jsxFileName = \"/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx\",\n  _s = $RefreshSig$();\nimport { Box, Button, Center, HStack, SimpleGrid, Text, Textarea, VStack, useColorModeValue, useToast } from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FileUploader } from \"react-drag-drop-files\";\nimport API from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioUpload = () => {\n  _s();\n  const [audio, setAudio] = useState();\n  const [audioFile, setAudioFile] = useState();\n  const [loading, setLoading] = useState(false);\n  const [srtTranscript, setSrt] = useState();\n  const [docTranscript, setDocTranscript] = useState();\n  const toast = useToast();\n  const fontColor = useColorModeValue(\"mode.text.light\", \"mode.text.dark\");\n\n  // Upload audio from local file system\n  const audioRef = useRef(null);\n\n  // useEffect when audio is uploaded. Use uploadAudio function to set audio file\n  useEffect(() => {\n    if (audio) {\n      uploadAudio(audio);\n    }\n  }, [audio]);\n  const uploadAudio = async audio => {\n    if (audio) {\n      setAudioFile(audio);\n      const objectUrl = URL.createObjectURL(audio);\n      console.log(objectUrl);\n      if (audioRef.current) {\n        audioRef.current.src = objectUrl;\n      }\n    }\n  };\n\n  //handle change function while file is uploaded. setFile to uploaded file\n\n  const handleChange = file => {\n    setAudio(file);\n  };\n  const transcribeAudio = async file => {\n    setLoading(true);\n    setDocTranscript(\"\");\n    if (!file) {\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await API.transcribeAudio(file, audioFile.name);\n      setLoading(false);\n      setDocTranscript(response.doc_text);\n      setSrt(response.srt_text);\n    } catch (error) {\n      toast({\n        title: \"En feil har oppstått.\",\n        description: \"Det skjedde en feil under transkripsjonen. Prøv igjen senere.\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true\n      });\n    }\n  };\n\n  // download transcript as a doc file\n  const downloadTranscript = async () => {\n    const element = document.createElement(\"a\");\n    // file as .docx\n    const file = new Blob([docTranscript], {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${audioFile.name.slice(0, -4)}.doc`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  const handleTranscriptChange = event => {\n    setDocTranscript(event.target.value);\n  };\n\n  // download transcript as a srt file\n\n  const downloadTranscriptSrt = async () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([srtTranscript], {\n      type: 'application/octet-stream'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${audioFile.name.slice(0, -4)}.srt`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 1,\n      alignContent: \"center\",\n      gap: 5,\n      children: [/*#__PURE__*/_jsxDEV(VStack, {\n        spacing: 5,\n        children: [/*#__PURE__*/_jsxDEV(FileUploader, {\n          multiple: false,\n          handleChange: handleChange,\n          types: ['WAV']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: audio ? `${audio.name}` : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: audioRef,\n          controls: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        isLoading: loading,\n        loadingText: \"Transcribing\",\n        spinnerPlacement: \"end\",\n        variant: \"outline\",\n        onClick: () => transcribeAudio(audio),\n        children: \"Transcribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), docTranscript && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          padding: \"10px\",\n          borderRadius: \"2xl\",\n          children: /*#__PURE__*/_jsxDEV(Textarea, {\n            size: \"lg\",\n            minWidth: \"600px\",\n            minHeight: \"300px\",\n            value: docTranscript,\n            onChange: handleTranscriptChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Center, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(HStack, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              bgColor: fontColor,\n              onClick: downloadTranscript,\n              children: \"Download transcript as .doc\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: downloadTranscriptSrt,\n              children: \"Download original transcript as .srt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioUpload, \"aJAtIua/6Y2u1Gf5TBz7VCJYM4Y=\", false, function () {\n  return [useToast, useColorModeValue];\n});\n_c = AudioUpload;\nexport default AudioUpload;\nvar _c;\n$RefreshReg$(_c, \"AudioUpload\");","map":{"version":3,"names":["Box","Button","Center","HStack","SimpleGrid","Text","Textarea","VStack","useColorModeValue","useToast","useEffect","useRef","useState","FileUploader","API","AudioUpload","audio","setAudio","audioFile","setAudioFile","loading","setLoading","srtTranscript","setSrt","docTranscript","setDocTranscript","toast","fontColor","audioRef","uploadAudio","objectUrl","URL","createObjectURL","console","log","current","src","handleChange","file","transcribeAudio","response","name","doc_text","srt_text","error","title","description","status","duration","isClosable","downloadTranscript","element","document","createElement","Blob","type","href","download","slice","body","appendChild","click","handleTranscriptChange","event","target","value","downloadTranscriptSrt"],"sources":["/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx"],"sourcesContent":["import { Box, Button, Center, HStack, Input, SimpleGrid, Text, Textarea, VStack, useColorModeValue, useToast } from \"@chakra-ui/react\";\nimport { SetStateAction, useEffect, useRef, useState } from \"react\";\nimport { FileUploader } from \"react-drag-drop-files\";\nimport API from \"./api\";\n\n\n\nconst AudioUpload = (): JSX.Element => {\n\n    const [audio, setAudio] = useState<File>();\n    const [audioFile, setAudioFile] = useState<File>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [srtTranscript, setSrt] = useState<string>();\n    const [docTranscript, setDocTranscript] = useState<string>();\n    const toast = useToast();\n\n    const fontColor = useColorModeValue(\"mode.text.light\", \"mode.text.dark\");\n\n\n\n    // Upload audio from local file system\n    const audioRef = useRef<HTMLAudioElement>(null);\n\n    // useEffect when audio is uploaded. Use uploadAudio function to set audio file\n    useEffect(() => {\n        if (audio) {\n            uploadAudio(audio);\n        }\n    }, [audio]);\n\n\n\n\n    const uploadAudio = async (audio: File) => {\n        if (audio) {\n            setAudioFile(audio);\n            const objectUrl = URL.createObjectURL(audio);\n            console.log(objectUrl);\n            if (audioRef.current) {\n                audioRef.current.src = objectUrl;\n            }\n        }\n    };\n\n    //handle change function while file is uploaded. setFile to uploaded file\n\n    const handleChange = (file: File) => {\n        setAudio(file);\n    };\n\n    const transcribeAudio = async (file: Blob) => {\n        setLoading(true);\n        setDocTranscript(\"\");\n        if (!file) {\n            setLoading(false);\n            return;\n        }\n        try {\n            const response = await API.transcribeAudio(file, audioFile!.name);\n            setLoading(false);\n            setDocTranscript(response.doc_text);\n            setSrt(response.srt_text);\n        } catch (error) {\n            toast({\n                title: \"En feil har oppstått.\",\n                description: \"Det skjedde en feil under transkripsjonen. Prøv igjen senere.\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              });\n        }\n\n    };\n\n    // download transcript as a doc file\n    const downloadTranscript = async () => {\n        const element = document.createElement(\"a\");\n        // file as .docx\n        const file = new Blob([docTranscript!], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.doc`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    const handleTranscriptChange = (event: { target: { value: SetStateAction<string | undefined>; }; }) => {\n        setDocTranscript(event.target.value);\n    }\n\n    // download transcript as a srt file\n\n    const downloadTranscriptSrt = async () => {\n        const element = document.createElement(\"a\");\n\n\n        const file = new Blob([srtTranscript!], { type: 'application/octet-stream' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.srt`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n\n\n\n    return (\n        <Center>\n            <SimpleGrid columns={1} alignContent=\"center\" gap={5}>\n                <VStack spacing={5}>\n                    <FileUploader\n                        multiple={false}\n                        handleChange={handleChange}\n                        types={['WAV']}\n                    />\n                    <Text>{audio ? `${audio.name}` : \"\"}</Text>\n                    <audio ref={audioRef} controls />\n                </VStack>\n                <Button\n                    isLoading={loading}\n                    loadingText='Transcribing'\n                    spinnerPlacement=\"end\"\n                    variant='outline'\n                    onClick={() => transcribeAudio(audio!)}>Transcribe\n                </Button>\n                {docTranscript && (\n                    <>\n                        <Box padding=\"10px\" borderRadius=\"2xl\">\n                            <Textarea\n                                size=\"lg\"\n                                minWidth=\"600px\"\n                                minHeight=\"300px\"\n                                value={docTranscript}\n                                onChange={handleTranscriptChange}\n                            />\n                        </Box>\n                        <Center> {/* Wrap the buttons in a Center component */}\n                            <HStack>\n                                <Button bgColor={fontColor} onClick={downloadTranscript}>Download transcript as .doc</Button>\n                                <Button onClick={downloadTranscriptSrt}>Download original transcript as .srt</Button>\n                            </HStack>\n                        </Center>\n                    </>\n                )}\n            </SimpleGrid>\n        </Center>\n\n    );\n\n};\n\nexport default AudioUpload;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}