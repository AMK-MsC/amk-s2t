{"ast":null,"code":"var _jsxFileName = \"/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx\",\n  _s = $RefreshSig$();\nimport { Box, Button, Center, SimpleGrid, Text, Textarea } from \"@chakra-ui/react\";\nimport { useRef, useState } from \"react\";\nimport API from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioUpload = () => {\n  _s();\n  const [audio, setAudio] = useState();\n  const [audioFile, setAudioFile] = useState();\n  const [loading, setLoading] = useState(false);\n  const [transcript, setTranscript] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n\n  // Upload audio from local file system\n  const audioRef = useRef(null);\n  const uploadAudio = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file) {\n      setAudio(file);\n      setAudioFile(file);\n      const objectUrl = URL.createObjectURL(file);\n      console.log(objectUrl);\n      if (audioRef.current) {\n        audioRef.current.src = objectUrl;\n        //audioRef.current.play();\n      }\n    }\n  };\n\n  const transcribeAudio = async file => {\n    setLoading(true);\n    if (!file) {\n      return;\n    }\n    const response = await API.transcribeAudio(file);\n    console.log(response);\n    setLoading(false);\n    setTranscript(response);\n  };\n\n  // download transcript as a doc file\n  const downloadTranscript = async () => {\n    const element = document.createElement(\"a\");\n    // file as .docx\n    const file = new Blob([transcript], {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${audioFile.name.slice(0, -4)}.doc`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  const handleTranscriptChange = event => {\n    setTranscript(event.target.value);\n  };\n\n  // download transcript as a srt file\n\n  const downloadTranscriptSrt = async () => {\n    const element = document.createElement(\"a\");\n    // file as .srt\n\n    const file = new Blob([transcript], {\n      type: 'application/octet-stream'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${audioFile.name.slice(0, -4)}.srt`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 1,\n      alignContent: \"center\",\n      gap: 5,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: uploadAudio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: audioRef,\n          controls: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: loading ? /*#__PURE__*/_jsxDEV(Text, {\n          children: \"Transcribing audio. Please wait.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => transcribeAudio(audio),\n          children: \"Transcribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 80\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), transcript && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          padding: \"10px\",\n          borderRadius: \"2xl\",\n          children: /*#__PURE__*/_jsxDEV(Textarea, {\n            size: \"lg\",\n            minWidth: \"600px\",\n            minHeight: \"300px\",\n            value: transcript,\n            onChange: handleTranscriptChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: downloadTranscript,\n          children: \"Download Transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioUpload, \"Ql2SCIcRd5ejCM1mNbApktYS4d8=\");\n_c = AudioUpload;\nexport default AudioUpload;\nvar _c;\n$RefreshReg$(_c, \"AudioUpload\");","map":{"version":3,"names":["Box","Button","Center","SimpleGrid","Text","Textarea","useRef","useState","API","AudioUpload","audio","setAudio","audioFile","setAudioFile","loading","setLoading","transcript","setTranscript","audioUrl","setAudioUrl","audioRef","uploadAudio","event","file","target","files","objectUrl","URL","createObjectURL","console","log","current","src","transcribeAudio","response","downloadTranscript","element","document","createElement","Blob","type","href","download","name","slice","body","appendChild","click","handleTranscriptChange","value","downloadTranscriptSrt"],"sources":["/home/oyvind/Documents/amkS2T/amks2t/src/AudioUpload.tsx"],"sourcesContent":["import { Box, Button, Center, Input, SimpleGrid, Text, Textarea, VStack } from \"@chakra-ui/react\";\nimport { SetStateAction, useEffect, useRef, useState } from \"react\";\nimport API from \"./api\";\n\n\n\nconst AudioUpload = (): JSX.Element => {\n\n    const [audio, setAudio] = useState<File>();\n    const [audioFile, setAudioFile] = useState<File>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [transcript, setTranscript] = useState<string>();\n    const [audioUrl, setAudioUrl] = useState<string>();\n\n\n\n    // Upload audio from local file system\n    const audioRef = useRef<HTMLAudioElement>(null);\n\n\n    const uploadAudio = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            setAudio(file);\n            setAudioFile(file);\n            const objectUrl = URL.createObjectURL(file);\n            console.log(objectUrl);\n            if (audioRef.current) {\n                audioRef.current.src = objectUrl;\n                //audioRef.current.play();\n            }\n        }\n    };\n\n    const transcribeAudio = async (file: Blob) => {\n        setLoading(true);\n        if (!file) {\n            return;\n        }\n        const response = await API.transcribeAudio(file);\n        console.log(response);\n        setLoading(false);\n        setTranscript(response);\n    };\n\n    // download transcript as a doc file\n    const downloadTranscript = async () => {\n        const element = document.createElement(\"a\");\n        // file as .docx\n        const file = new Blob([transcript!], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.doc`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    const handleTranscriptChange = (event: { target: { value: SetStateAction<string | undefined>; }; }) => {\n        setTranscript(event.target.value);\n    }\n\n    // download transcript as a srt file\n    \n    const downloadTranscriptSrt = async () => {\n        const element = document.createElement(\"a\");\n        // file as .srt\n\n        const file = new Blob([transcript!], { type: 'application/octet-stream' });\n        element.href = URL.createObjectURL(file);\n        element.download = `${audioFile!.name.slice(0, -4)}.srt`;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n        \n    \n\n\n    return (\n        <Center>\n            <SimpleGrid columns={1} alignContent=\"center\" gap={5}>\n                <Box>\n                    <input type=\"file\" onChange={uploadAudio} />\n                    <audio ref={audioRef} controls />\n                </Box>\n                <Box>\n                    {loading ? <Text>Transcribing audio. Please wait.</Text> : <Button onClick={() => transcribeAudio(audio!)}>Transcribe</Button>}\n                </Box>\n                {transcript && (\n                    <>\n                        <Box padding=\"10px\" borderRadius=\"2xl\">\n                            <Textarea\n                                size=\"lg\"\n                                minWidth=\"600px\"\n                                minHeight=\"300px\"\n                                value={transcript}\n                                onChange={handleTranscriptChange}\n                            />\n                        </Box>\n                        <Button onClick={downloadTranscript}>Download Transcript</Button>\n                    </>\n                )}\n            </SimpleGrid>\n        </Center>\n    );\n\n};\n\nexport default AudioUpload;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}